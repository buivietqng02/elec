stages:
  - build
  - deploy
  - switch

build:dev:
  stage: build
  tags:
    - dev-server
  script:
    - sed -i "s|#CI_PID|$CI_PIPELINE_ID|g" VERSION
    - sed -i "s|#CI_HASH|$CI_COMMIT_SHORT_SHA|g" VERSION
    - sed -i "s|#CI_DATE|$(date -u +%d-%m-%Y)|g" VERSION
    - version=$(<VERSION)
    - sed -i "s|#XM_VERSION|$version|g" app/features/modal/modalVersion.js
    - sed -i "s|#XM_VERSION|$version|g" sw.js
    - npm install
    - yarn run build
    - rm -f README.md package-lock.json package.json package-lock.json webpack.common.js webpack.dev.js  webpack.prod.js yarn.lock 
    - rm -r node_modules docs
    - mkdir .dist
    - cp -r * .dist
    - mv .dist dist
  only:
    - dev
    - multiparty-webrtc 
  artifacts:
    paths:
      - dist

deploy:dev:
  stage: deploy
  tags:
    - dev-server
  script:
    - sudo rm -rf /var/www/xm.iptp.dev/html/*
    - sudo cp -r dist/* $SITE_PATH_DEV
    - sudo chown -R www-data:www-data $SITE_PATH_DEV

  only:
    - dev
    - multiparty-webrtc 
  dependencies:
    - build:dev

.build-prod:
  script: &build-prod
    - sed -i "s|#CI_PID|$CI_PIPELINE_ID|g" VERSION
    - sed -i "s|#CI_HASH|$CI_COMMIT_SHORT_SHA|g" VERSION
    - sed -i "s|#CI_DATE|$(date -u +%d-%m-%Y)|g" VERSION
    - version=$(<VERSION)
    - sed -i "s|#XM_VERSION|$version|g" app/features/modal/modalVersion.js
    - sed -i "s|#XM_VERSION|$version|g" sw.js
    - npm install
    - yarn run build:prod
    - rm -f README.md package-lock.json package.json package-lock.json webpack.common.js webpack.dev.js  webpack.prod.js yarn.lock 
    - rm -r node_modules docs
    - mkdir .dist
    - cp -r * .dist
    - mv .dist dist

.deploy-prod:
  script: &deploy-prod
    - export DEPLOY_COLOR=$(if grep -q 'blue' /var/www/deployment_id; then echo 'green'; else echo 'blue'; fi;)
    - sudo rm -rf /var/www/xm-$DEPLOY_COLOR/html/*
    - sudo cp -r dist/* /var/www/xm-$DEPLOY_COLOR/html
    - sudo chown -R nginx:nginx /var/www/xm-$DEPLOY_COLOR/html

build:la:
  stage: build
  when: manual
  tags:
    - la
  script:
   *build-prod
  only:
    - master
  artifacts:
    paths:
      - dist
    expire_in: 3 days

deploy:la:
  stage: deploy
  when: manual
  tags:
    - la
  script:
    *deploy-prod
  only:
    - master
  dependencies:
    - build:la

build:ams:
  stage: build
  when: manual
  tags:
    - ams
  script:
    *build-prod
  only:
    - master
  artifacts:
    paths:
      - dist
    expire_in: 3 days

deploy:ams:
  stage: deploy
  when: manual
  tags:
    - ams
  script:
    *deploy-prod
  only:
    - master
  dependencies:
    - build:ams

build:sg:
  stage: build
  when: manual
  tags:
    - sg
  script:
    *build-prod
  only:
    - master
  artifacts:
    paths:
      - dist
    expire_in: 3 days

deploy:sg:
  stage: deploy
  when: manual
  tags:
    - sg
  script:
    *deploy-prod
  only:
    - master
  dependencies:
    - build:sg
  
build:syd:
  stage: build
  when: manual
  tags:
    - syd
  script:
    *build-prod
  only:
    - master
  artifacts:
    paths:
      - dist
    expire_in: 3 days

deploy:syd:
  stage: deploy
  when: manual
  tags:
    - syd
  script:
    *deploy-prod
  only:
    - master
  dependencies:
    - build:syd

.switch-prod:
  script: &switch-prod
    - export CURR_ENV=$(if grep -q 'blue' /var/www/deployment_id; then echo 'blue'; else echo 'green'; fi;)
    - export NEW_ENV=$(if grep -q 'blue' /var/www/deployment_id; then echo 'green'; else echo 'blue'; fi;)
    - sudo sed -i "s|nginx-$CURR_ENV.inc|nginx-$NEW_ENV.inc|g" /var/www/nginx/conf.d/default.conf
    - sudo sed -i "s|$CURR_ENV|$NEW_ENV|g" /var/www/deployment_id
    - docker exec xm-nginx-load-balancer nginx -s reload

switch:ams:
  stage: switch
  when: manual
  tags:
    - ams
  script:
    *switch-prod
  only:
    - master


switch:sg:
  stage: switch
  when: manual
  tags:
    - sg
  script:
    *switch-prod
  only:
    - master

switch:la:
  stage: switch
  when: manual
  tags:
    - la
  script:
    *switch-prod
  only:
    - master

switch:syd:
  stage: switch
  when: manual
  tags:
    - syd
  script:
    *switch-prod
  only:
    - master